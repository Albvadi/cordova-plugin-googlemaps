def searchFileInParents(target) {
  def searchPath = target
  for (int i = 0; i < 8; i++) {
    println(searchPath)
    def targetFile = file(searchPath)
    if(!targetFile.canRead()) {
      searchPath = '../' + searchPath;
    } else {
      return targetFile;
    }
  }
  return null;
}

android {
  def isCapacitor = false
  def isIonic = false

  lintOptions {
      abortOnError false
  }

  // #1. Find (project)/capacitor.config.json file,
  //     ionic/capacitor should copy <preference> to this file
  def configFile = searchFileInParents("capacitor.config.json")

  // #2. Find (project)/config.xml file,
  //     because ionic capacitor does not copy <preference> nodes
  if (configFile == null) {
    isCapacitor = false
    configFile = searchFileInParents("config.xml")

    if (configFile == null) {
      // #3. Find (project)/app/src/main/res/xml/config.xml file,
      //     cordova should copy <preference> to this file
      configFile = searchFileInParents("app/src/main/res/xml/config.xml")
      isCapacitor = false
    }
  } else {
    isCapacitor = true
  }

  if (searchFileInParents("ionic.config.json")) {
    isIonic = true
  }

  if (!isCapacitor && configFile == null) {
    throw new GradleException("Can not find config.xml file.")
  }
  if (isCapacitor && configFile == null) {
    throw new GradleException("Can not find capacitor.config.json file.")
  }
  def useBetaSdk = 0
  def isKeyFound = 0
  Properties props = new Properties()
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_VERSION", "15.0.1");
  props.setProperty("ANDROID_SUPPORT_CORE_VERSION", "28.0.0");
  props.setProperty("GOOGLE_MAPS_ANDROID_SDK", "");

  if (!isCapacitor) {
    //-------------------
    // cordova
    //-------------------
    // parse xml file
    def widget = new XmlParser().parse(configFile)
    if (widget.preference == null) {
      throw new GradleException("widget is null.")
    }
    if (widget.preference.size() == 0) {
      throw new GradleException("Please add '<preference name=\"GOOGLE_MAPS_ANDROID_API_KEY\" />' to the config.xml file.")
    }

    println("preference = " + widget.preference.size())
    widget.preference.each { pref ->
      def name = pref.attributes().name
      def value = pref.attributes().value
      // println("name = " + name + ", value = " + value);
      if (name == "GOOGLE_MAPS_ANDROID_API_KEY") {
        isKeyFound = 1
        props.setProperty(name, value)
      }
      if (name == "GOOGLE_MAPS_PLAY_SERVICES_VERSION" ||
          name == "ANDROID_SUPPORT_CORE_VERSION") {
        props.setProperty(name, value)
      }
      if (name == "GOOGLE_MAPS_ANDROID_SDK") {
        useBetaSdk = 1
        props.setProperty("GOOGLE_MAPS_ANDROID_SDK", value)
      }
    }
    if (isKeyFound == 0) {
      throw new GradleException("Please add '<preference name=\"GOOGLE_MAPS_ANDROID_API_KEY\" />' to the config.xml file.")
    }

  } else {
    //-------------------
    // ionic/capacitor
    //-------------------
    // parse json file
    println("configFile = " + configFile)
    def parser = new groovy.json.JsonSlurper()
    def json = parser.parse file(configFile)
    def value = json.GOOGLE_MAPS_ANDROID_API_KEY
    // println("APIKEY = " + value)
    if (value != null) {
      props.setProperty("GOOGLE_MAPS_ANDROID_API_KEY", value)
    } else {
      throw new GradleException("Please add '\"GOOGLE_MAPS_ANDROID_API_KEY\"' to the capacitor.config.json file.")
    }

    if (json.ANDROID_SUPPORT_CORE_VERSION) {
      props.setProperty("ANDROID_SUPPORT_CORE_VERSION", json.ANDROID_SUPPORT_CORE_VERSION)
    }
    if (json.GOOGLE_MAPS_PLAY_SERVICES_VERSION) {
      props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_VERSION", json.GOOGLE_MAPS_PLAY_SERVICES_VERSION)
    }
    if (json.GOOGLE_MAPS_ANDROID_SDK) {
      useBetaSdk = 1
      props.setProperty("GOOGLE_MAPS_ANDROID_SDK", json.GOOGLE_MAPS_ANDROID_SDK)
    }
  }


  if (useBetaSdk == 1) {
    def libsDirPath = System.getProperty("user.dir")
    def libsDir = new File("${libsDirPath}/libs/")
    if (!libsDir.exists()) {
      libsDir.mkdirs()
    }

    def mapsSDK = props.getProperty("GOOGLE_MAPS_ANDROID_SDK")
    def f = new File("${libsDir.absolutePath}/${mapsSDK}.aar")
    println("---->lib = " + f.absolutePath);
    if (!f.exists()) {
      new URL("https://dl.google.com/dl/geosdk/${mapsSDK}.aar").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    dependencies {
      implementation name: mapsSDK, ext:'aar'
    }
  }

  def PLAY_SERVICES_VERSION = props.get("GOOGLE_MAPS_PLAY_SERVICES_VERSION")
  def ANDROID_SUPPORT_CORE_VERSION = props.get("ANDROID_SUPPORT_CORE_VERSION")
  println("---->PLAY_SERVICES_VERSION = ${PLAY_SERVICES_VERSION}")
  println("---->ANDROID_SUPPORT_CORE_VERSION = ${ANDROID_SUPPORT_CORE_VERSION}")
  dependencies {
    implementation "com.google.android.gms:play-services-maps:${PLAY_SERVICES_VERSION}"
    implementation "com.google.android.gms:play-services-location:${PLAY_SERVICES_VERSION}"
  }
  // println("----->isCapacitor = " + isCapacitor)
  if (!isIonic) {
    dependencies {
       implementation "com.android.support:support-core-utils:${ANDROID_SUPPORT_CORE_VERSION}"
    }
  }


  buildTypes {
    debug {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = props.getProperty("GOOGLE_MAPS_ANDROID_API_KEY")
    }
    release {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = props.getProperty("GOOGLE_MAPS_ANDROID_API_KEY")
    }
  }
}
